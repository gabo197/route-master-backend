// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RouteMaster.API.Domain.Persistence.Contexts;

#nullable disable

namespace RouteMaster.API.Migrations
{
    [DbContext(typeof(RouteMasterContext))]
    [Migration("20231017185134_AddTravelBoundedContext")]
    partial class AddTravelBoundedContext
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Account", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("Account", (string)null);

                    b.HasDiscriminator<int>("AccountTypeId");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.AccountType", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountTypeId");

                    b.ToTable("AccountType", (string)null);

                    b.HasData(
                        new
                        {
                            AccountTypeId = 1,
                            Name = "Administrator"
                        },
                        new
                        {
                            AccountTypeId = 2,
                            Name = "Passenger"
                        });
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Address", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("StreetLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("CountryId", "DepartmentId", "ProvinceId", "DistrictId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.AuditLog", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastLogout")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("AuditLog", (string)null);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Country", (string)null);

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            IsActive = true,
                            Name = "Perú"
                        });
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Department", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId", "DepartmentId");

                    b.ToTable("Department", (string)null);

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            IsActive = true,
                            Name = "Lima"
                        });
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.District", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId", "DepartmentId", "ProvinceId", "DistrictId");

                    b.ToTable("District", (string)null);

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 1,
                            IsActive = true,
                            Name = "Ancón"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 2,
                            IsActive = true,
                            Name = "Ate"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 3,
                            IsActive = true,
                            Name = "Barranco"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 4,
                            IsActive = true,
                            Name = "Breña"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 5,
                            IsActive = true,
                            Name = "Carabayllo"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 6,
                            IsActive = true,
                            Name = "Chaclacayo"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 7,
                            IsActive = true,
                            Name = "Chorrillos"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 8,
                            IsActive = true,
                            Name = "Cieneguilla"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 9,
                            IsActive = true,
                            Name = "Comas"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 10,
                            IsActive = true,
                            Name = "El Agustino"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 11,
                            IsActive = true,
                            Name = "Independencia"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 12,
                            IsActive = true,
                            Name = "Jesús María"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 13,
                            IsActive = true,
                            Name = "La Molina"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 14,
                            IsActive = true,
                            Name = "La Victoria"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 15,
                            IsActive = true,
                            Name = "Lima"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 16,
                            IsActive = true,
                            Name = "Lince"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 17,
                            IsActive = true,
                            Name = "Los Olivos"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 18,
                            IsActive = true,
                            Name = "Lurigancho"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 19,
                            IsActive = true,
                            Name = "Lurín"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 20,
                            IsActive = true,
                            Name = "Magdalena del Mar"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 21,
                            IsActive = true,
                            Name = "Miraflores"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 22,
                            IsActive = true,
                            Name = "Pachacámac"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 23,
                            IsActive = true,
                            Name = "Pucusana"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 24,
                            IsActive = true,
                            Name = "Pueblo Libre"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 25,
                            IsActive = true,
                            Name = "Puente Piedra"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 26,
                            IsActive = true,
                            Name = "Punta Hermosa"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 27,
                            IsActive = true,
                            Name = "Punta Negra"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 28,
                            IsActive = true,
                            Name = "Rímac"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 29,
                            IsActive = true,
                            Name = "San Bartolo"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 30,
                            IsActive = true,
                            Name = "San Borja"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 31,
                            IsActive = true,
                            Name = "San Isidro"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 32,
                            IsActive = true,
                            Name = "San Juan de Lurigancho"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 33,
                            IsActive = true,
                            Name = "San Juan de Miraflores"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 34,
                            IsActive = true,
                            Name = "San Luis"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 35,
                            IsActive = true,
                            Name = "San Martín de Porres"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 36,
                            IsActive = true,
                            Name = "San Miguel"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 37,
                            IsActive = true,
                            Name = "Santa Anita"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 38,
                            IsActive = true,
                            Name = "Santa María del Mar"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 39,
                            IsActive = true,
                            Name = "Santa Rosa"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 40,
                            IsActive = true,
                            Name = "Santiago de Surco"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 41,
                            IsActive = true,
                            Name = "Surquillo"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 42,
                            IsActive = true,
                            Name = "Villa El Salvador"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            DistrictId = 43,
                            IsActive = true,
                            Name = "Villa María del Triunfo"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 2,
                            DistrictId = 1,
                            IsActive = true,
                            Name = "Bellavista"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 2,
                            DistrictId = 2,
                            IsActive = true,
                            Name = "Callao"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 2,
                            DistrictId = 3,
                            IsActive = true,
                            Name = "Carmen de La Legua"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 2,
                            DistrictId = 4,
                            IsActive = true,
                            Name = "La Perla"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 2,
                            DistrictId = 5,
                            IsActive = true,
                            Name = "La Punta"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 2,
                            DistrictId = 6,
                            IsActive = true,
                            Name = "Mi Perú"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 2,
                            DistrictId = 7,
                            IsActive = true,
                            Name = "Ventanilla"
                        });
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.DocumentType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentTypeId");

                    b.ToTable("DocumentType", (string)null);

                    b.HasData(
                        new
                        {
                            DocumentTypeId = 1,
                            Name = "DNI"
                        },
                        new
                        {
                            DocumentTypeId = 2,
                            Name = "Carné de extranjería"
                        },
                        new
                        {
                            DocumentTypeId = 3,
                            Name = "Pasaporte"
                        });
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverId"));

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("DriverId");

                    b.HasAlternateKey("DocumentTypeId", "DocumentNumber");

                    b.HasIndex("VehicleId")
                        .IsUnique()
                        .HasFilter("[VehicleId] IS NOT NULL");

                    b.HasIndex("VehicleTypeId");

                    b.HasIndex("DocumentTypeId", "DocumentNumber")
                        .IsUnique();

                    b.ToTable("Driver", (string)null);

                    b.HasDiscriminator<int>("VehicleTypeId");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Line", b =>
                {
                    b.Property<int>("LineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LineId"));

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("FirstStop")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastStop")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("LineId");

                    b.HasAlternateKey("Code");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Line", (string)null);

                    b.HasDiscriminator<int>("VehicleTypeId");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.LineStop", b =>
                {
                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<int>("StopId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("LineId", "StopId");

                    b.HasIndex("StopId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("LineStop", (string)null);

                    b.HasDiscriminator<int>("VehicleTypeId");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethod", (string)null);

                    b.HasData(
                        new
                        {
                            PaymentMethodId = 1,
                            Name = "Tarjeta de crédito"
                        },
                        new
                        {
                            PaymentMethodId = 2,
                            Name = "Tarjeta de débito"
                        },
                        new
                        {
                            PaymentMethodId = 3,
                            Name = "Yape / Plin"
                        });
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Province", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId", "DepartmentId", "ProvinceId");

                    b.ToTable("Province", (string)null);

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 1,
                            IsActive = true,
                            Name = "Lima Metropolitana"
                        },
                        new
                        {
                            CountryId = 1,
                            DepartmentId = 1,
                            ProvinceId = 2,
                            IsActive = true,
                            Name = "Callao"
                        });
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Stop", b =>
                {
                    b.Property<int>("StopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StopId"));

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(12,9)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(12,9)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("StopId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Stop", (string)null);

                    b.HasDiscriminator<int>("VehicleTypeId");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<string>("BusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasFilter("[TransactionId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Transaction", null, t =>
                        {
                            t.HasCheckConstraint("CK_Transaction_Amount", "Amount > 0.00");
                        });

                    b.HasDiscriminator<int>("TransactionTypeId");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.TransactionType", b =>
                {
                    b.Property<int>("TransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionTypeId");

                    b.ToTable("TransactionType", (string)null);

                    b.HasData(
                        new
                        {
                            TransactionTypeId = 1,
                            Name = "Payment"
                        },
                        new
                        {
                            TransactionTypeId = 2,
                            Name = "Recharge"
                        },
                        new
                        {
                            TransactionTypeId = 3,
                            Name = "Transfer"
                        });
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Trip", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TripId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("Trip", (string)null);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.TripDetail", b =>
                {
                    b.Property<int>("TripDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TripDetailId"));

                    b.Property<int>("DestinationStopId")
                        .HasColumnType("int");

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("OriginStopId")
                        .HasColumnType("int");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("TripDetailId");

                    b.HasIndex("DestinationStopId");

                    b.HasIndex("LineId");

                    b.HasIndex("OriginStopId");

                    b.HasIndex("TripId");

                    b.HasIndex("VehicleId");

                    b.ToTable("TripDetail", (string)null);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GoogleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasAlternateKey("Email");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.HasAlternateKey("PlateNumber");

                    b.HasIndex("LineId");

                    b.HasIndex("PlateNumber")
                        .IsUnique();

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicle", (string)null);

                    b.HasDiscriminator<int>("VehicleTypeId");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.VehicleType", b =>
                {
                    b.Property<int>("VehicleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleTypeId");

                    b.ToTable("VehicleType", (string)null);

                    b.HasData(
                        new
                        {
                            VehicleTypeId = 1,
                            Name = "Autobús"
                        },
                        new
                        {
                            VehicleTypeId = 2,
                            Name = "Metro"
                        },
                        new
                        {
                            VehicleTypeId = 3,
                            Name = "Subterráneo"
                        });
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WalletId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallet", null, t =>
                        {
                            t.HasCheckConstraint("CK_Wallet_Balance", "Balance <= 500.00");
                        });
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Administrator", b =>
                {
                    b.HasBaseType("RouteMaster.API.Domain.Models.Account");

                    b.ToTable("Account", (string)null);

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Passenger", b =>
                {
                    b.HasBaseType("RouteMaster.API.Domain.Models.Account");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Account", (string)null);

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.BusDriver", b =>
                {
                    b.HasBaseType("RouteMaster.API.Domain.Models.Driver");

                    b.ToTable("Driver", (string)null);

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.RailwayDriver", b =>
                {
                    b.HasBaseType("RouteMaster.API.Domain.Models.Driver");

                    b.ToTable("Driver", (string)null);

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.SubwayDriver", b =>
                {
                    b.HasBaseType("RouteMaster.API.Domain.Models.Driver");

                    b.ToTable("Driver", (string)null);

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.BusLine", b =>
                {
                    b.HasBaseType("RouteMaster.API.Domain.Models.Line");

                    b.ToTable("Line", (string)null);

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.RailwayLine", b =>
                {
                    b.HasBaseType("RouteMaster.API.Domain.Models.Line");

                    b.ToTable("Line", (string)null);

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.SubwayLine", b =>
                {
                    b.HasBaseType("RouteMaster.API.Domain.Models.Line");

                    b.ToTable("Line", (string)null);

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.BusLineStop", b =>
                {
                    b.HasBaseType("RouteMaster.API.Domain.Models.LineStop");

                    b.ToTable("LineStop", (string)null);

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.RailwayLineStop", b =>
                {
                    b.HasBaseType("RouteMaster.API.Domain.Models.LineStop");

                    b.ToTable("LineStop", (string)null);

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.SubwayLineStop", b =>
                {
                    b.HasBaseType("RouteMaster.API.Domain.Models.LineStop");

                    b.ToTable("LineStop", (string)null);

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.BusStop", b =>
                {
                    b.HasBaseType("RouteMaster.API.Domain.Models.Stop");

                    b.ToTable("Stop", (string)null);

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.RailwayStop", b =>
                {
                    b.HasBaseType("RouteMaster.API.Domain.Models.Stop");

                    b.ToTable("Stop", (string)null);

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.SubwayStop", b =>
                {
                    b.HasBaseType("RouteMaster.API.Domain.Models.Stop");

                    b.ToTable("Stop", (string)null);

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.PaymentTransaction", b =>
                {
                    b.HasBaseType("RouteMaster.API.Domain.Models.Transaction");

                    b.HasIndex("WalletId");

                    b.ToTable("Transaction", null, t =>
                        {
                            t.HasCheckConstraint("CK_Transaction_Amount", "Amount > 0.00");
                        });

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.RechargeTransaction", b =>
                {
                    b.HasBaseType("RouteMaster.API.Domain.Models.Transaction");

                    b.HasIndex("WalletId");

                    b.ToTable("Transaction", null, t =>
                        {
                            t.HasCheckConstraint("CK_Transaction_Amount", "Amount > 0.00");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.TransferTransaction", b =>
                {
                    b.HasBaseType("RouteMaster.API.Domain.Models.Transaction");

                    b.Property<int>("RecipientWalletId")
                        .HasColumnType("int");

                    b.HasIndex("RecipientWalletId");

                    b.HasIndex("WalletId");

                    b.ToTable("Transaction", null, t =>
                        {
                            t.HasCheckConstraint("CK_Transaction_Amount", "Amount > 0.00");
                        });

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Bus", b =>
                {
                    b.HasBaseType("RouteMaster.API.Domain.Models.Vehicle");

                    b.ToTable("Vehicle", (string)null);

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Railway", b =>
                {
                    b.HasBaseType("RouteMaster.API.Domain.Models.Vehicle");

                    b.ToTable("Vehicle", (string)null);

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Subway", b =>
                {
                    b.HasBaseType("RouteMaster.API.Domain.Models.Vehicle");

                    b.ToTable("Vehicle", (string)null);

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Account", b =>
                {
                    b.HasOne("RouteMaster.API.Domain.Models.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RouteMaster.API.Domain.Models.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("RouteMaster.API.Domain.Models.Account", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Address", b =>
                {
                    b.HasOne("RouteMaster.API.Domain.Models.Passenger", "Passenger")
                        .WithOne("Address")
                        .HasForeignKey("RouteMaster.API.Domain.Models.Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RouteMaster.API.Domain.Models.District", "District")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId", "DepartmentId", "ProvinceId", "DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.AuditLog", b =>
                {
                    b.HasOne("RouteMaster.API.Domain.Models.Passenger", "Passenger")
                        .WithOne("AuditLog")
                        .HasForeignKey("RouteMaster.API.Domain.Models.AuditLog", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Department", b =>
                {
                    b.HasOne("RouteMaster.API.Domain.Models.Country", "Country")
                        .WithMany("Departments")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.District", b =>
                {
                    b.HasOne("RouteMaster.API.Domain.Models.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("CountryId", "DepartmentId", "ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Driver", b =>
                {
                    b.HasOne("RouteMaster.API.Domain.Models.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RouteMaster.API.Domain.Models.Vehicle", "Vehicle")
                        .WithOne("Driver")
                        .HasForeignKey("RouteMaster.API.Domain.Models.Driver", "VehicleId");

                    b.HasOne("RouteMaster.API.Domain.Models.VehicleType", "VehicleType")
                        .WithMany("Drivers")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("Vehicle");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Line", b =>
                {
                    b.HasOne("RouteMaster.API.Domain.Models.Company", "Company")
                        .WithMany("Lines")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RouteMaster.API.Domain.Models.VehicleType", "VehicleType")
                        .WithMany("Lines")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.LineStop", b =>
                {
                    b.HasOne("RouteMaster.API.Domain.Models.Line", "Line")
                        .WithMany("LineStops")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RouteMaster.API.Domain.Models.Stop", "Stop")
                        .WithMany("LineStops")
                        .HasForeignKey("StopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RouteMaster.API.Domain.Models.VehicleType", "VehicleType")
                        .WithMany("LineStops")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Line");

                    b.Navigation("Stop");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Province", b =>
                {
                    b.HasOne("RouteMaster.API.Domain.Models.Department", "Department")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId", "DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Stop", b =>
                {
                    b.HasOne("RouteMaster.API.Domain.Models.VehicleType", "VehicleType")
                        .WithMany("Stops")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Ticket", b =>
                {
                    b.HasOne("RouteMaster.API.Domain.Models.Transaction", "Transaction")
                        .WithOne()
                        .HasForeignKey("RouteMaster.API.Domain.Models.Ticket", "TransactionId");

                    b.HasOne("RouteMaster.API.Domain.Models.Passenger", "Passenger")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Passenger");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Transaction", b =>
                {
                    b.HasOne("RouteMaster.API.Domain.Models.TransactionType", "TransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Trip", b =>
                {
                    b.HasOne("RouteMaster.API.Domain.Models.Passenger", "Passenger")
                        .WithMany("Trips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.TripDetail", b =>
                {
                    b.HasOne("RouteMaster.API.Domain.Models.Stop", "DestinationStop")
                        .WithMany()
                        .HasForeignKey("DestinationStopId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RouteMaster.API.Domain.Models.Line", "Line")
                        .WithMany()
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RouteMaster.API.Domain.Models.Stop", "OriginStop")
                        .WithMany()
                        .HasForeignKey("OriginStopId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RouteMaster.API.Domain.Models.Trip", "Trip")
                        .WithMany("TripDetails")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RouteMaster.API.Domain.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");

                    b.Navigation("DestinationStop");

                    b.Navigation("Line");

                    b.Navigation("OriginStop");

                    b.Navigation("Trip");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Vehicle", b =>
                {
                    b.HasOne("RouteMaster.API.Domain.Models.Line", "Line")
                        .WithMany("Vehicles")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RouteMaster.API.Domain.Models.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Line");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Wallet", b =>
                {
                    b.HasOne("RouteMaster.API.Domain.Models.Passenger", "Passenger")
                        .WithOne("Wallet")
                        .HasForeignKey("RouteMaster.API.Domain.Models.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Passenger", b =>
                {
                    b.HasOne("RouteMaster.API.Domain.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Passengers")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.PaymentTransaction", b =>
                {
                    b.HasOne("RouteMaster.API.Domain.Models.Wallet", "Wallet")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.RechargeTransaction", b =>
                {
                    b.HasOne("RouteMaster.API.Domain.Models.Wallet", "Wallet")
                        .WithMany("RechargeTransactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.TransferTransaction", b =>
                {
                    b.HasOne("RouteMaster.API.Domain.Models.Wallet", "RecipientWallet")
                        .WithMany("RecievedTransferTransactions")
                        .HasForeignKey("RecipientWalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RouteMaster.API.Domain.Models.Wallet", "Wallet")
                        .WithMany("SentTransferTransactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecipientWallet");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Company", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Country", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Department", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.District", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Line", b =>
                {
                    b.Navigation("LineStops");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.PaymentMethod", b =>
                {
                    b.Navigation("Passengers");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Province", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Stop", b =>
                {
                    b.Navigation("LineStops");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Trip", b =>
                {
                    b.Navigation("TripDetails");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.User", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Vehicle", b =>
                {
                    b.Navigation("Driver");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.VehicleType", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("LineStops");

                    b.Navigation("Lines");

                    b.Navigation("Stops");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Wallet", b =>
                {
                    b.Navigation("PaymentTransactions");

                    b.Navigation("RechargeTransactions");

                    b.Navigation("RecievedTransferTransactions");

                    b.Navigation("SentTransferTransactions");
                });

            modelBuilder.Entity("RouteMaster.API.Domain.Models.Passenger", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("AuditLog")
                        .IsRequired();

                    b.Navigation("Tickets");

                    b.Navigation("Trips");

                    b.Navigation("Wallet")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
